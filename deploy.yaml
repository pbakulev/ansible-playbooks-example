---
- name: deploy application
  hosts: localhost
  connection: local
  vars:
    config_path: ""
    namespace: default
    app_name: ""
    host_name: lb.example.com

  tasks:
  - name: Create a Deployment for "{{ app_name }}"
    community.kubernetes.k8s:
      state: present        
      kubeconfig: "{{ config_path }}"
      definition:
        apiVersion: apps/v1
        kind: Deployment
        metadata:
          name: "{{ app_name }}"
          namespace: "{{ namespace }}"
          labels:
            app: "{{ app_name }}"
        spec:
          replicas: 1
          selector:
            matchLabels:
              app: "{{ app_name }}"
          template:
            metadata:
              labels:
                app: "{{ app_name }}"
            spec:
              containers:
              - name: "{{ app_name }}"
                image: "{{ image }}"
                ports:
                - containerPort: 8080
                  name: http
  - name: Create a Service for "{{ app_name }}"
    community.kubernetes.k8s:
      state: present
      kubeconfig: "{{ config_path }}"
      definition:
        apiVersion: v1
        kind: Service
        metadata:
          name: "{{ app_name }}"
          namespace: "{{ namespace }}"
          labels:
            app: "{{ app_name }}"
        spec:
          selector:
            app: "{{ app_name }}"
          ports:
          - protocol: TCP
            targetPort: http
            name: port-8080-tcp
            port: 80
    delegate_to: localhost

  - name: Create a Ingress for "{{ app_name }}"
    community.kubernetes.k8s:
      state: present
      kubeconfig: "{{ config_path }}"
      definition:
        apiVersion: networking.k8s.io/v1
        kind: Ingress
        metadata:
          name: "{{ app_name }}"
          namespace: "{{ namespace }}"
        spec:
          rules:
          - host: "{{ host_name }}"
            http:
              paths:
              - path: /
                pathType: Prefix
                backend:
                  service:
                    name: "{{ app_name }}"
                    port:
                      number: 80
  - name: wait for pods to come up
    shell: kubectl -n "{{ namespace }}" get pods -o json â€“-kube-config "{{ config_path }}"
    register: kubectl_get_pods
    until: kubectl_get_pods.stdout|from_json|json_query('items[*].status.phase')|unique == ["Running"]